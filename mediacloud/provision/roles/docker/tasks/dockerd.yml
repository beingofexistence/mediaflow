- name: Include variables
  include_vars: ../vars/dockerd.yml
  tags:
    - docker
    - dockerd

- name: Remove old Docker versions
  apt:
    name:
      - containerd
      - docker
      - docker-engine
      - docker.io
      - runc
    state: absent
  become: true
  become_user: root
  tags:
    - docker
    - dockerd

- name: Add Docker GPG key
  apt_key:
    url: "https://download.docker.com/linux/ubuntu/gpg"
    state: present
  become: true
  become_user: root
  tags:
    - docker
    - dockerd

- name: Get DEB architecture
  shell: "dpkg --print-architecture"
  register: deb_architecture
  tags:
    - docker
    - dockerd

- name: Add Docker APT repository
  apt_repository:
    repo: "deb [arch={{ deb_architecture.stdout }}] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename | lower }} stable"
    state: present
    filename: "docker-ce"
    update_cache: true
  become: true
  become_user: root
  tags:
    - docker
    - dockerd

- name: Find out specific Docker APT package version to install
  shell: "apt-cache madison docker-ce | grep {{ docker_version }} | awk '{ print $3 }' | head -n 1"
  changed_when: false
  register: docker_apt_version
  tags:
    - docker
    - dockerd

- name: Print Docker APT version that will be installed
  debug:
    var: docker_apt_version.stdout
  tags:
    - docker
    - dockerd

- name: Make sure that Docker APT package version was found
  fail:
    msg: The system may not be provisioned according to the CMDB status.
  when: docker_apt_version.stdout == ""
  tags:
    - docker
    - dockerd

- name: Find out specific containerd.io APT package version to install
  shell: "apt-cache madison containerd.io | grep {{ containerd_io_version }} | awk '{ print $3 }' | head -n 1"
  changed_when: false
  register: containerd_io_apt_version
  tags:
    - docker
    - dockerd

- name: Print containerd.io APT version that will be installed
  debug:
    var: containerd_io_apt_version.stdout
  tags:
    - docker
    - dockerd

- name: Make sure that containerd.io APT package version was found
  fail:
    msg: The system may not be provisioned according to the CMDB status.
  when: containerd_io_apt_version.stdout == ""
  tags:
    - docker
    - dockerd

- name: Install Docker and containerd.io
  apt:
    name:
      - "docker-ce={{ docker_apt_version.stdout }}"
      - "docker-ce-cli={{ docker_apt_version.stdout }}"
      - "containerd.io={{ containerd_io_apt_version.stdout }}"
    state: present
    install_recommends: false
    
    # Workaround to enable --allow-downgrades / --allow-upgrades
    force: true
    force_apt_get: true

  become: true
  become_user: root
  tags:
    - docker
    - dockerd

- name: Prevent Docker from getting automatically upgraded
  dpkg_selections:
    name: "{{ item }}"
    selection: hold
  with_items:
    - "docker-ce"
    - "docker-ce-cli"
    - "containerd.io"
  become: true
  become_user: root
  tags:
    - docker
    - dockerd

- name: Configure Docker daemon
  copy:
    content: "{{ docker_daemon_config | to_nice_json(indent=2) }}"
    dest: /etc/docker/daemon.json
  notify: "Restart Docker"
  become: true
  become_user: root
  tags:
    - docker    
    - dockerd

- name: Start Docker
  service:
    name: docker
    state: started
  become: true
  become_user: root
  tags:
    - docker
    - dockerd

- name: Restart Docker if needed
  meta: flush_handlers
  become: true
  become_user: root
  tags:
    - docker
    - dockerd

# User might need to re-login afterwards
- name: Allow current user to access Docker
  user:
    name: "{{ ansible_user_id }}"
    groups: docker
    append: true
  become: true
  become_user: root
  tags:
    - docker
    - dockerd

- name: Install Pip and Setuptools
  apt:
    name:
      # Required for building CFFI
      - build-essential
      - python3-dev
      - libffi-dev
      - libssl-dev
      - python3-pip
      # Required by docker-compose:
      - python3-setuptools
    state: present
    install_recommends: false
  become: true
  become_user: root
  tags:
    - docker
    - dockerd

# For Ansible to be able to manage Docker swarms and such
- name: "Install 'docker' Python module"
  pip:
    name: "docker=={{ docker_python_module_version }}"
    state: present
    executable: /usr/bin/pip3
  become: true
  become_user: root
  tags:
    - docker
    - dockerd

- name: Install docker-compose
  pip:
    name: "docker-compose=={{ docker_compose_version }}"
    state: present
    executable: /usr/bin/pip3
  become: true
  become_user: root
  tags:
    - docker
    - dockerd

- name: Add PATH to Docker's Cron job
  cron:
    name: PATH
    env: true
    job: /usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
    cron_file: /etc/cron.d/docker-system-prune
    user: root
  become: true
  become_user: root
  tags:
    - docker
    - dockerd

- name: Add Cron job to clean up old Docker images / containers / networks / cache
  cron:
    name: "Clean up old Docker images / containers / networks / cache"
    job: "docker system prune -f > /dev/null"
    cron_file: /etc/cron.d/docker-system-prune
    user: root
    # Nothing's wrong about running it even more often than daily:
    special_time: hourly
  become: true
  become_user: root
  tags:
    - docker
    - dockerd
